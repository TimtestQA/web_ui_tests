{
  "uid" : "24fbc30104337728",
  "name" : "test_login[admin@example.com- Admin123!-Invalid credentials-False]",
  "fullName" : "tests.test_login.TestLoginIncorrectData#test_login",
  "historyId" : "e72928711cbcb4215485b489b77c0a68",
  "time" : {
    "start" : 1750138135054,
    "stop" : 1750138136737,
    "duration" : 1683
  },
  "status" : "broken",
  "statusMessage" : "AttributeError: 'UIHelper' object has no attribute 'get_text'",
  "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f6cf8cd0250>\nemail = 'admin@example.com', password = ' Admin123!'\nerror_message = 'Invalid credentials', expected_result = False\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, error_message, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", None, True),\n            (\"friend@example.com\", \"Friend123!\", None, True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin.example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example..com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", \"This value is required\", False),\n            (\"admin@example.com\", \"\", \"This value is required\", False),\n            (\"\", \"\", \"This value is required\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"admin\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"12345678\", \"Invalid credentials\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", \"Invalid credentials\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", \"Invalid credentials\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com \", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \" Admin123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"Admin123! \", \"Invalid credentials\", False),\n        ]\n    )\n    def test_login(self, email, password, error_message, expected_result):\n        self.login_page().open().screenshot(\"login_page_opened\")\n        self.login_page().is_opened()\n    \n        self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n        self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n        self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n        if not expected_result:\n>           assert self.login_page().ui.get_text(locator=self.login_page()._ERROR_MESSAGE) == error_message\nE           AttributeError: 'UIHelper' object has no attribute 'get_text'\n\ntests/test_login.py:75: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1750138058274,
      "stop" : 1750138058275,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData",
    "time" : {
      "start" : 1750138135052,
      "stop" : 1750138135054,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1750138134719,
      "stop" : 1750138135052,
      "duration" : 333
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "take_screenshot_on_failure",
    "time" : {
      "start" : 1750138135052,
      "stop" : 1750138135052,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "AttributeError: 'UIHelper' object has no attribute 'get_text'",
    "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f6cf8cd0250>\nemail = 'admin@example.com', password = ' Admin123!'\nerror_message = 'Invalid credentials', expected_result = False\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, error_message, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", None, True),\n            (\"friend@example.com\", \"Friend123!\", None, True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin.example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example..com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", \"This value is required\", False),\n            (\"admin@example.com\", \"\", \"This value is required\", False),\n            (\"\", \"\", \"This value is required\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"admin\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"12345678\", \"Invalid credentials\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", \"Invalid credentials\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", \"Invalid credentials\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com \", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \" Admin123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"Admin123! \", \"Invalid credentials\", False),\n        ]\n    )\n    def test_login(self, email, password, error_message, expected_result):\n        self.login_page().open().screenshot(\"login_page_opened\")\n        self.login_page().is_opened()\n    \n        self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n        self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n        self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n        if not expected_result:\n>           assert self.login_page().ui.get_text(locator=self.login_page()._ERROR_MESSAGE) == error_message\nE           AttributeError: 'UIHelper' object has no attribute 'get_text'\n\ntests/test_login.py:75: AttributeError",
    "steps" : [ {
      "name" : "Open page",
      "time" : {
        "start" : 1750138135055,
        "stop" : 1750138135724,
        "duration" : 669
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Check if page is opened",
      "time" : {
        "start" : 1750138135946,
        "stop" : 1750138135955,
        "duration" : 9
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "80eef462db00215c",
      "name" : "login_page_opened",
      "source" : "80eef462db00215c.png",
      "type" : "image/png",
      "size" : 39972
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData::0",
    "time" : {
      "start" : 1750138136746,
      "stop" : 1750138136746,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1750138136748,
      "stop" : 1750138136810,
      "duration" : 62
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "take_screenshot_on_failure::0",
    "time" : {
      "start" : 1750138136747,
      "stop" : 1750138136748,
      "duration" : 1
    },
    "status" : "broken",
    "statusMessage" : "AttributeError: 'Function' object has no attribute 'rep_call'\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.14/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.14/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n    ~~~~^^^^\n  File \"/usr/workspace/fixtures/ui_fixtures.py\", line 69, in take_screenshot_on_failure\n    if request.node.rep_call.failed:  # Если тест провалился\n       ^^^^^^^^^^^^^^^^^^^^^\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Login"
  }, {
    "name" : "feature",
    "value" : "Login Page"
  }, {
    "name" : "tag",
    "value" : "negative_login"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLoginIncorrectData"
  }, {
    "name" : "host",
    "value" : "afe10b5e29e1"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "email",
    "value" : "'admin@example.com'"
  }, {
    "name" : "error_message",
    "value" : "'Invalid credentials'"
  }, {
    "name" : "expected_result",
    "value" : "False"
  }, {
    "name" : "password",
    "value" : "' Admin123!'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "negative_login" ]
  },
  "source" : "24fbc30104337728.json",
  "parameterValues" : [ "'admin@example.com'", "'Invalid credentials'", "False", "' Admin123!'" ]
}