{
  "uid" : "6b976001ad68d0a2",
  "name" : "test_login[admin@example.com-Admin123!-None-True]",
  "fullName" : "tests.test_login.TestLoginIncorrectData#test_login",
  "historyId" : "b6e99b17688584c615f7c714c0d41281",
  "time" : {
    "start" : 1750138058617,
    "stop" : 1750138076421,
    "duration" : 17804
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f6cf8c96490>\nemail = 'admin@example.com', password = 'Admin123!', error_message = None\nexpected_result = True\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, error_message, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", None, True),\n            (\"friend@example.com\", \"Friend123!\", None, True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin.example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example..com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", \"This value is required\", False),\n            (\"admin@example.com\", \"\", \"This value is required\", False),\n            (\"\", \"\", \"This value is required\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"admin\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"12345678\", \"Invalid credentials\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", \"Invalid credentials\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", \"Invalid credentials\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com \", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \" Admin123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"Admin123! \", \"Invalid credentials\", False),\n        ]\n    )\n    def test_login(self, email, password, error_message, expected_result):\n        self.login_page().open().screenshot(\"login_page_opened\")\n        self.login_page().is_opened()\n    \n        self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n        self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n        self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n        if not expected_result:\n            assert self.login_page().ui.get_text(locator=self.login_page()._ERROR_MESSAGE) == error_message\n        else:\n>           self.news_feed_page().is_opened()\n\ntests/test_login.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:26: in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"058229f4305ecbbd8fb2af36951e715d\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f6cf8c69f30>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "take_screenshot_on_failure",
    "time" : {
      "start" : 1750138058615,
      "stop" : 1750138058615,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData",
    "time" : {
      "start" : 1750138058615,
      "stop" : 1750138058616,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1750138058274,
      "stop" : 1750138058275,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1750138058275,
      "stop" : 1750138058615,
      "duration" : 340
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f6cf8c96490>\nemail = 'admin@example.com', password = 'Admin123!', error_message = None\nexpected_result = True\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, error_message, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", None, True),\n            (\"friend@example.com\", \"Friend123!\", None, True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin.example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example..com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", \"This value is required\", False),\n            (\"admin@example.com\", \"\", \"This value is required\", False),\n            (\"\", \"\", \"This value is required\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"admin\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"12345678\", \"Invalid credentials\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", \"Invalid credentials\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", \"Invalid credentials\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com \", \"Admin123!\", \"This value should be a valid email\", False),\n            (\"admin@example.com\", \" Admin123!\", \"Invalid credentials\", False),\n            (\"admin@example.com\", \"Admin123! \", \"Invalid credentials\", False),\n        ]\n    )\n    def test_login(self, email, password, error_message, expected_result):\n        self.login_page().open().screenshot(\"login_page_opened\")\n        self.login_page().is_opened()\n    \n        self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n        self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n        self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n        if not expected_result:\n            assert self.login_page().ui.get_text(locator=self.login_page()._ERROR_MESSAGE) == error_message\n        else:\n>           self.news_feed_page().is_opened()\n\ntests/test_login.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:26: in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"058229f4305ecbbd8fb2af36951e715d\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f6cf8c69f30>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException",
    "steps" : [ {
      "name" : "Open page",
      "time" : {
        "start" : 1750138058619,
        "stop" : 1750138060253,
        "duration" : 1634
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Check if page is opened",
      "time" : {
        "start" : 1750138060444,
        "stop" : 1750138060452,
        "duration" : 8
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Check if page is opened",
      "time" : {
        "start" : 1750138061220,
        "stop" : 1750138076419,
        "duration" : 15199
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.14/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/base/base_page.py\", line 26, in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "37e61a3160646b8b",
      "name" : "login_page_opened",
      "source" : "37e61a3160646b8b.png",
      "type" : "image/png",
      "size" : 40865
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "take_screenshot_on_failure::0",
    "time" : {
      "start" : 1750138076461,
      "stop" : 1750138076462,
      "duration" : 1
    },
    "status" : "broken",
    "statusMessage" : "AttributeError: 'Function' object has no attribute 'rep_call'\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.14/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.14/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n    ~~~~^^^^\n  File \"/usr/workspace/fixtures/ui_fixtures.py\", line 69, in take_screenshot_on_failure\n    if request.node.rep_call.failed:  # Если тест провалился\n       ^^^^^^^^^^^^^^^^^^^^^\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  }, {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData::0",
    "time" : {
      "start" : 1750138076461,
      "stop" : 1750138076461,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1750138076463,
      "stop" : 1750138076530,
      "duration" : 67
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Login"
  }, {
    "name" : "feature",
    "value" : "Login Page"
  }, {
    "name" : "tag",
    "value" : "negative_login"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLoginIncorrectData"
  }, {
    "name" : "host",
    "value" : "afe10b5e29e1"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "email",
    "value" : "'admin@example.com'"
  }, {
    "name" : "error_message",
    "value" : "None"
  }, {
    "name" : "expected_result",
    "value" : "True"
  }, {
    "name" : "password",
    "value" : "'Admin123!'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "negative_login" ]
  },
  "source" : "6b976001ad68d0a2.json",
  "parameterValues" : [ "'admin@example.com'", "None", "True", "'Admin123!'" ]
}