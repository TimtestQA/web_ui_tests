{
  "uid" : "1e892efe13db5cd4",
  "name" : "test_login[admin@example.com-Admin123!-True]",
  "fullName" : "tests.test_login.TestLoginIncorrectData#test_login",
  "historyId" : "bf2e7569ca8607b83754af5517710fa6",
  "time" : {
    "start" : 1750235740884,
    "stop" : 1750235757823,
    "duration" : 16939
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f1f1b4d8a50>\nemail = 'admin@example.com', password = 'Admin123!', expected_result = True\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", True),\n            (\"friend@example.com\", \"Friend123!\", True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", False),\n            (\"@example.com\", \"Admin123!\", False),\n            (\"admin.example.com\", \"Admin123!\", False),\n            (\"admin@example\", \"Admin123!\", False),\n            (\"admin@.com\", \"Admin123!\", False),\n            (\"admin@example..com\", \"Admin123!\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", False),\n            (\"admin@example.com\", \"\", False),\n            (\"\", \"\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", False),\n            (\"admin@example.com\", \"admin\", False),\n            (\"admin@example.com\", \"12345678\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", False),\n            (\"admin@example.com \", \"Admin123!\", False),\n            (\"admin@example.com\", \" Admin123!\", False),\n            (\"admin@example.com\", \"Admin123! \", False),\n        ]\n    )\n    def test_login(self, email, password, expected_result):\n        try:\n            self.login_page().open().screenshot(\"login_page_opened\")\n            self.login_page().is_opened()\n    \n            self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n            self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n            self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n            if not expected_result:\n                actual_error = self.login_page().get_error_message()\n                assert actual_error is not None, \"Expected an error message, but got None\"\n                assert \"Invalid username or password\" in actual_error, f\"Expected error message containing 'Invalid username or password', but got: {actual_error}\"\n            else:\n                self.news_feed_page().is_opened()\n    \n        except TimeoutException as e:\n            if not expected_result:\n                # Если тест должен был провалиться, то TimeoutException - это ожидаемое поведение\n                pass\n            else:\n                # Если тест должен был пройти успешно, то TimeoutException - это ошибка\n>               raise e\n\ntests/test_login.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_login.py:123: in test_login\n    self.news_feed_page().is_opened()\nbase/base_page.py:26: in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"725af739943edd3e7cc046372db634ca\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f1f1b4df3d0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "take_screenshot_on_failure",
    "time" : {
      "start" : 1750235740881,
      "stop" : 1750235740881,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1750235740579,
      "stop" : 1750235740881,
      "duration" : 302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData",
    "time" : {
      "start" : 1750235740882,
      "stop" : 1750235740884,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1750235660281,
      "stop" : 1750235660282,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_login.TestLoginIncorrectData object at 0x7f1f1b4d8a50>\nemail = 'admin@example.com', password = 'Admin123!', expected_result = True\n\n    @pytest.mark.negative_login\n    @pytest.mark.parametrize(\n        \"email, password, expected_result\", [\n            # Валидные данные\n            (\"admin@example.com\", \"Admin123!\", True),\n            (\"friend@example.com\", \"Friend123!\", True),\n    \n            # Невалидный email\n            (\"admin@\", \"Admin123!\", False),\n            (\"@example.com\", \"Admin123!\", False),\n            (\"admin.example.com\", \"Admin123!\", False),\n            (\"admin@example\", \"Admin123!\", False),\n            (\"admin@.com\", \"Admin123!\", False),\n            (\"admin@example..com\", \"Admin123!\", False),\n    \n            # Пустые поля\n            (\"\", \"Admin123!\", False),\n            (\"admin@example.com\", \"\", False),\n            (\"\", \"\", False),\n    \n            # Неверный пароль\n            (\"admin@example.com\", \"WrongPass123!\", False),\n            (\"admin@example.com\", \"admin\", False),\n            (\"admin@example.com\", \"12345678\", False),\n    \n            # XSS и SQL инъекции\n            (\"admin@example.com' OR '1'='1\", \"Admin123!\", False),\n            (\"admin@example.com\", \"Admin123!' OR '1'='1\", False),\n            (\"<script>alert('xss')</script>@example.com\", \"Admin123!\", False),\n    \n            # Специальные символы\n            (\"admin!@example.com\", \"Admin123!\", False),\n            (\"admin@example.com\", \"Admin!@#$%^&*()\", False),\n    \n            # Пробелы\n            (\" admin@example.com\", \"Admin123!\", False),\n            (\"admin@example.com \", \"Admin123!\", False),\n            (\"admin@example.com\", \" Admin123!\", False),\n            (\"admin@example.com\", \"Admin123! \", False),\n        ]\n    )\n    def test_login(self, email, password, expected_result):\n        try:\n            self.login_page().open().screenshot(\"login_page_opened\")\n            self.login_page().is_opened()\n    \n            self.login_page().ui.fill(locator=self.login_page()._LOGIN_FIELD, text=email, clear=True)\n            self.login_page().ui.fill(locator=self.login_page()._PASSWORD_FIELD, text=password, clear=True)\n            self.login_page().ui.click(locator=self.login_page()._LOGIN_BUTTON)\n    \n            if not expected_result:\n                actual_error = self.login_page().get_error_message()\n                assert actual_error is not None, \"Expected an error message, but got None\"\n                assert \"Invalid username or password\" in actual_error, f\"Expected error message containing 'Invalid username or password', but got: {actual_error}\"\n            else:\n                self.news_feed_page().is_opened()\n    \n        except TimeoutException as e:\n            if not expected_result:\n                # Если тест должен был провалиться, то TimeoutException - это ожидаемое поведение\n                pass\n            else:\n                # Если тест должен был пройти успешно, то TimeoutException - это ошибка\n>               raise e\n\ntests/test_login.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_login.py:123: in test_login\n    self.news_feed_page().is_opened()\nbase/base_page.py:26: in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"725af739943edd3e7cc046372db634ca\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f1f1b4df3d0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
    "steps" : [ {
      "name" : "Open page",
      "time" : {
        "start" : 1750235740886,
        "stop" : 1750235741652,
        "duration" : 766
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Check if page is opened",
      "time" : {
        "start" : 1750235741865,
        "stop" : 1750235741874,
        "duration" : 9
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Check if page is opened",
      "time" : {
        "start" : 1750235742636,
        "stop" : 1750235757822,
        "duration" : 15186
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.14/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/base/base_page.py\", line 26, in is_opened\n    self.wait.until(EC.url_to_be(self._PAGE_URL))\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.14/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "d7e4b88afd6b2b80",
      "name" : "login_page_opened",
      "source" : "d7e4b88afd6b2b80.png",
      "type" : "image/png",
      "size" : 39074
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "take_screenshot_on_failure::0",
    "time" : {
      "start" : 1750235757862,
      "stop" : 1750235757988,
      "duration" : 126
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1805549635839710",
      "name" : "Screen on failure",
      "source" : "1805549635839710.png",
      "type" : "image/png",
      "size" : 50333
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : true
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1750235757988,
      "stop" : 1750235758050,
      "duration" : 62
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_xunit_setup_method_fixture_TestLoginIncorrectData::0",
    "time" : {
      "start" : 1750235757862,
      "stop" : 1750235757862,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Login Page"
  }, {
    "name" : "epic",
    "value" : "Login"
  }, {
    "name" : "tag",
    "value" : "negative_login"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLoginIncorrectData"
  }, {
    "name" : "host",
    "value" : "c348c67a2d70"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "email",
    "value" : "'admin@example.com'"
  }, {
    "name" : "expected_result",
    "value" : "True"
  }, {
    "name" : "password",
    "value" : "'Admin123!'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "negative_login" ]
  },
  "source" : "1e892efe13db5cd4.json",
  "parameterValues" : [ "'admin@example.com'", "True", "'Admin123!'" ]
}